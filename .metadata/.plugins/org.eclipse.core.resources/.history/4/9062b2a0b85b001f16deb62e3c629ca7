import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.app.dto.LoginRequest;
import com.app.dto.LoginResponse;
import com.app.security.JwtTokenProvider;
import com.app.service.AuthService;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @PostMapping("/login")
    public ResponseEntity<LoginResponse> login(@RequestBody LoginRequest loginRequest, HttpServletResponse response) {
        // Authenticate user and generate token
        String token = authService.authenticate(loginRequest);

        // Set token in the response header
        response.setHeader("Authorization", "Bearer " + token);

        return ResponseEntity.ok(new LoginResponse(token));
    }

    @PostMapping("/logout")
    public ResponseEntity<String> logout(HttpServletRequest request, HttpServletResponse response) {
        // Invalidate the token (for stateless JWT, this means on the client side)
        // You could add the token to a blacklist on the server if needed, or simply rely on the client to remove it

        // Optional: clear the Authorization header
        response.setHeader("Authorization", "");

        return ResponseEntity.ok("Logged out successfully");
    }
}
